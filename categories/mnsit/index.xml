<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MNSIT on Nived&#39;s Blog</title>
    <link>http://supertramp2.github.io/blog/categories/mnsit/</link>
    <description>Recent content in MNSIT on Nived&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Mar 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://supertramp2.github.io/blog/categories/mnsit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Document Scanner that works.</title>
      <link>http://supertramp2.github.io/blog/posts/docscan/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/docscan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>First neural netowork on MNSIT dataset.</title>
      <link>http://supertramp2.github.io/blog/posts/handwriting/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/handwriting/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Masking stuffs in an image</title>
      <link>http://supertramp2.github.io/blog/posts/masking/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/masking/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SinGANs - a GAN that trains on a single image</title>
      <link>http://supertramp2.github.io/blog/posts/singan/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/singan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>StyleGAN - A very popular GAN</title>
      <link>http://supertramp2.github.io/blog/posts/stylegan/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/stylegan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Summiting mountains using RL.</title>
      <link>http://supertramp2.github.io/blog/posts/climbingcars/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/climbingcars/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using GANs for Single Image Super Resolution</title>
      <link>http://supertramp2.github.io/blog/posts/srgan/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/srgan/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using GANs to create art</title>
      <link>http://supertramp2.github.io/blog/posts/cyclegan/</link>
      <pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://supertramp2.github.io/blog/posts/cyclegan/</guid>
      <description>&lt;p&gt;A project reproducing the results of &lt;a href=&#34;https://arxiv.org/abs/1703.10593&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;CycleGAN paper&lt;/a&gt;
 and making some additional changes to improve its performance.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I was introduced to the idea &amp;ldquo;Image to Image Translation&amp;rdquo; by a Kaggle competition named &lt;a href=&#34;https://www.kaggle.com/c/gan-getting-started&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&amp;ldquo;I&amp;rsquo;m Something of a Painter Myself&amp;rdquo;&lt;/a&gt;
. The competition was about creating a GAN model that can translate a given set of digital photos to paintings. After going through almost every publicly available notebook in Kaggle and reading many different articles and the &lt;a href=&#34;https://arxiv.org/abs/1703.10593&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;CycleGAN paper&lt;/a&gt;
 I was eventually able to get some idea on CycleGANs.&lt;/p&gt;
&lt;h2 id=&#34;objective&#34;&gt;Objective&lt;/h2&gt;
&lt;p&gt;The model should be able to translate any given digital image photos to Monet like paintings. Some other examples will be conversion of a horse into zebra, day time images to night time images etc. See the figure below to get an idea.&lt;/p&gt;
&lt;p&gt;Also model is trained on an unpaired datasets, which means that for any horse image present in the dataset a similar looking zebra image need not be present, which makes the problem even more complex.&lt;/p&gt;
&lt;h2 id=&#34;cyclegan-model&#34;&gt;CycleGAN Model&lt;/h2&gt;
&lt;p&gt;Generative Adversarial Networks were firstly introduced by Ian Goodfellow et.al[6], where they basically proposed an adversarial networks consisting of a Generator and a Discriminator. Generator as the name suggests, continuously generates output and the objective of the discriminator is to determine whether this output is real or fake. CycleGAN is basically following the idea but instead of using a single Generator and Discriminator, two of each is used. If we have two image domains X and Y (day and night), CycleGAN consists of a Generator G : X -&amp;gt; Y, the second Generator F: Y -&amp;gt; X and two Discriminator Dx and Dy. &lt;br&gt;
Firstly an image of either of the domain(say X) is taken and is fed into G that generates an image of Domain Y, this image is fed into both Dy and F. Dy classifies it as real or fake, thus optimizing G (Adversarial Loss), whereas F takes in the output of G as the input, and generates an image of domain X known as the reconstructed image, which should be the same as the original input image (Cycle Loss). We also pass an image of domain Y to G to calculate the identity loss. Similar process is repeated by taking in an image from domain Y as the input.&lt;br&gt;
&lt;img  src=&#34;https://github.com/supertramp2/Blog/content/Images/base.png&#34;
        alt=&#34;Base Model&#34;/&gt;&lt;/p&gt;
&lt;p&gt;The above diagram shows the architecture of the CycleGAN Model along with the three loss functions - Adversarial Loss, Content Loss and Identity Loss.&lt;/p&gt;
&lt;h4 id=&#34;adversarial-loss&#34;&gt;Adversarial loss&lt;/h4&gt;
&lt;p&gt;When the Generator G tries to translate input image from domain X to a similar looking image in domain Y, while the Discriminator Dy aims to distinguish images from both the domains. The authors of the original refers to this process as a minimax game where the Discriminator is trying to maximize the probability of correct classification and the Generator is trying to minimize the same. Adversarial loss encourages the generators to generate visually appealing images, which happens to be one of the biggest upside of using GANs.&lt;/p&gt;
&lt;h4 id=&#34;cycle-consistency-loss&#34;&gt;Cycle Consistency loss&lt;/h4&gt;
&lt;p&gt;Adversarial loss ensures that the Generator fools the descriminator for each generated image which does not really mean that the generated image is what we need. Therefore we use Cycle Consistency loss to ensure that random images are not generated. The Input image of domain X, when translated to domain Y and then back to X should output exactly the same image and Cycle Consistency loss is minimized to achieve the same.&lt;/p&gt;
&lt;h4 id=&#34;identity-loss&#34;&gt;Identity loss&lt;/h4&gt;
&lt;p&gt;Here an input image of domain Y is passed onto the Generator X-&amp;gt;Y and an image known as identity image which is of the same domain Y. Obviously the Input and Output image in this case should be identical. This again ensures that generator does not generate random images.&lt;/p&gt;
&lt;h2 id=&#34;my-contributions&#34;&gt;My Contributions&lt;/h2&gt;
&lt;h4 id=&#34;new-architecture&#34;&gt;New Architecture&lt;/h4&gt;
&lt;p&gt;One big disadvantage of CycleGAN is training them is really difficult and the training time is too long, thanks to its multiple generators and discriminators.So I eliminated the use of Discriminator Dy. This did not affect the output quality by much rather decreased the training time. The modified architecture is shown in the below diagram.&lt;br&gt;
&lt;img  src=&#34;https://github.com/supertramp2/Blog/content/Images/new.png&#34;
        alt=&#34;Modified Model&#34;/&gt;&lt;/p&gt;
&lt;h4 id=&#34;improved-identity-loss&#34;&gt;Improved Identity Loss&lt;/h4&gt;
&lt;p&gt;Layer of pretrained VGG-19 Network was used for feature extraction and the loss was calculated on the basis of these features. This improved the quality of generated outputs.&lt;/p&gt;
&lt;h4 id=&#34;new-datasets&#34;&gt;New Datasets&lt;/h4&gt;
&lt;p&gt;Both the original and modified model was trained on Monet-Photos Dataset and a Day-Night image dataset, which I had created by combining different images from publicly available sources. Both the original and modified models were trained on these datasets and I was able to Translate photos to paintings, Night time images to Day time images. Additionally I also wanted to compare the two models using metrics such as MSE, PSNR and SSIM and therefore created a dataset with some random colored photos, then took another set of photos and converted them to grayscale.&lt;/p&gt;
&lt;h2 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Both the models were then trained to translate a colored image to grayscale, and the generated image was compared with the grayscale version of the input image. I found that usage of VGG network gave better results compared to the original one, but there was some reduction in quality when I modified the architecture. Still any reduction in training time is always a good thing especially in the case deep networks such as CycleGANs.
&lt;img  src=&#34;https://github.com/supertramp2/Blog/content/Images/eval.png&#34;
        alt=&#34;Evaluation Table&#34;/&gt;&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The below images shows a few of the results I obtained.
&lt;img  src=&#34;https://github.com/supertramp2/Blog/content/Images/photo.jpg&#34;
        alt=&#34;Monet&#34;/&gt;&lt;br&gt;
&lt;img  src=&#34;https://github.com/supertramp2/Blog/content/Images/daynight.jpg&#34;
        alt=&#34;DayNight&#34;/&gt;&lt;br&gt;
&lt;img  src=&#34;https://github.com/supertramp2/Blog/content/Images/nightday.jpg&#34;
        alt=&#34;DayNight&#34;/&gt;&lt;/p&gt;
&lt;p&gt;The model took me to the 4th place in the kaggle competition mentioned earlier, and the model with a single discriminator had almost the same score as the original one, even though there was improvement to the score.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>